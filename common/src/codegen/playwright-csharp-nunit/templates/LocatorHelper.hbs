using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;

namespace {{{rootNamespace}}}
{
    public static class LocatorHelper
    {
        public static async Task<string> GetLocatorTagTypeAsync(this ILocator locator)
        {
            return await locator.EvaluateAsync<string>("e => e.tagName");
        }

        /// <summary>
        /// Dyanmic input based on locator tag
        /// </summary>
        /// <param name="locator">Locator name</param>
        /// <param name="data">Data to be input</param>
        public static async Task InputAsync(this ILocator locator, string data)
        {
            string tagName = await locator.GetLocatorTagTypeAsync();
            switch (tagName.ToLower())
            {
                case "input":
                    await locator.FillAsync("");
                    await locator.TypeAsync(data);
                    break;
                case "select":
                    await locator.SelectOptionAsync(new SelectOptionValue() { Label = data });
                    break;
                default:
                    await locator.FillAsync("");
                    await locator.TypeAsync(data);
                    break;
            }
        }

        /// <summary>
        /// Click outside of element. This will helps Single Page Application sets it states to new value
        /// </summary>
        /// <param name="page">Playwright page</param>
        public static async Task ClickOutsideAsync(this IPage page)
        {
            await page.Locator("xpath=//body >> nth=0").ClickAsync();
        }

        /// <summary>
        /// Helper to detect locator type and call right function
        /// </summary>
        /// <param name="testCase">Test case</param>
        /// <param name="locator">Locator</param>
        /// <param name="data">Data</param>
        public static async Task VerifyAsync(this PlaywrightTest testCase, ILocator locator, string data)
        {
            switch (data.ToLower())
            {
                case "visible":
                    await testCase.Expect(locator).ToBeVisibleAsync();
                    break;
                case "hidden":
                    await testCase.Expect(locator).ToBeHiddenAsync();
                    break;
                case "readonly":
                    await testCase.Expect(locator).ToBeDisabledAsync();
                    break;
                case "edittable":
                    await testCase.Expect(locator).ToBeEditableAsync();
                    break;
                default:
                    // Otherwise we just compare the text contain base on element type
                    string tagName = await locator.GetLocatorTagTypeAsync();
                    switch (tagName.ToLower())
                    {
                        case "input":
                            await testCase.Expect(locator).ToHaveValueAsync(data);
                            break;
                        default:
                            await testCase.Expect(locator).ToHaveTextAsync(data);
                            break;
                    }
                    break;
            }
        }
    }
}